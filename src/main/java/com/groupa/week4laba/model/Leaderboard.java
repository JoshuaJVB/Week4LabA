package com.groupa.week4laba.model;

import com.fasterxml.jackson.annotation.JsonIgnore;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;

/******************************************************************************************
 * Below is the code that generates a leaderboard objects.
 * The fields provided are an autogenerated Id, a list of matches, and a string called class referring to the game type
 * @author Janine Parham
 * Contributors: Andy Strain, Tye Porter
 * @version 0.1
 * @since   10-28-2020
 ******************************************************************************************/
@Entity(name = "Leaderboard")
public class Leaderboard {

    @Id
    @GeneratedValue
    private Long id;

    // @JsonIgnore fixes infinite recursion StackOverflowError when 
    // making call to http://localhost:8080/admin/get/leaderboard/all
    // Not sure why this happens. I will read more about this problem (Tye)

    @JsonIgnore
    @OneToMany(fetch = FetchType.EAGER, mappedBy = "leaderboard", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Match> matches;

    private String clazz;

    /****************************************************************
     * default contructor for leadreboard
     * creates all the fields except for clazz
     ***************************************************************/
    public Leaderboard(){
        super();
        this.matches = new ArrayList<>();
    }

    /****************************************************************
     * custom constructor to create clazz
     ***************************************************************/
    public Leaderboard(String clazz) {
        this();
        this.clazz = clazz;
    }

    /****************************************************************
     * gets the long value of Id
     ***************************************************************/
    public Long getId() {
        return id;
    }

    /****************************************************************
     * gets a list of matches on the leaderboard
     ***************************************************************/
    public List<Match> getMatches() {
        return matches;
    }

    /****************************************************************
     * sets the list of matches on the leaderboard
     ***************************************************************/
    public void setMatches(List<Match> matches) {
        this.matches = matches;
    }

    /****************************************************************
     * gets the clazz value associated with the leaderboard
     ***************************************************************/
    @Column(unique = true)
    public String getClazz() {
        return clazz;
    }

    /****************************************************************
     * sets the class value associated with the leaderboard
     ***************************************************************/
    public void setClazz(String _clazz) {
        this.clazz = _clazz;
    }
}
